class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None

    def add_to_end(self, data):
        """Add a new node with the given data to the end of the list."""
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return

        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        """Prints all elements in the linked list."""
        if not self.head:
            print("List is empty.")
            return

        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        """Deletes the nth node in the list (1-based index)."""
        if not self.head:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise IndexError("Index should be a positive integer.")

        # Deleting the head
        if n == 1:
            print(f"Deleting node at position {n} with value {self.head.data}")
            self.head = self.head.next
            return

        current = self.head
        prev = None
        count = 1

        while current and count < n:
            prev = current
            current = current.next
            count += 1

        if not current:
            raise IndexError("Index out of range.")

        print(f"Deleting node at position {n} with value {current.data}")
        prev.next = current.next

if __name__ == "__main__":
    ll = LinkedList()

    print("Adding elements:")
    for value in [10, 20, 30, 40, 50]:
        ll.add_to_end(value)
    ll.print_list()

    print("\nDeleting the 3rd node:")
    try:
        ll.delete_nth_node(3)
        ll.print_list()
    except Exception as e:
        print("Error:", e)

    print("\nAttempting to delete 10th node (out of range):")
    try:
        ll.delete_nth_node(10)
    except Exception as e:
        print("Error:", e)

    print("\nDeleting all nodes:")
    try:
        for i in range(1, 6):
            ll.delete_nth_node(1)
            ll.print_list()
    except Exception as e:
        print("Error:", e)
